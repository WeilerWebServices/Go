vet.exe is a tool for static analysis of Go programs.

vet.exe examines Go source code and reports suspicious constructs,
such as Printf calls whose arguments do not align with the format
string. It uses heuristics that do not guarantee all reports are
genuine problems, but it can find errors not caught by the compilers.

Registered analyzers:

    asmdecl      report mismatches between assembly files and Go declarations
    assign       check for useless assignments
    atomic       check for common mistakes using the sync/atomic package
    bools        check for common mistakes involving boolean operators
    buildtag     check that +build tags are well-formed and correctly located
    cgocall      detect some violations of the cgo pointer passing rules
    composites   check for unkeyed composite literals
    copylocks    check for locks erroneously passed by value
    errorsas     report passing non-pointer or non-error values to errors.As
    httpresponse check for mistakes using HTTP responses
    ifaceassert  detect impossible interface-to-interface type assertions
    loopclosure  check references to loop variables from within nested functions
    lostcancel   check cancel func returned by context.WithCancel is called
    nilfunc      check for useless comparisons between functions and nil
    printf       check consistency of Printf format strings and arguments
    shift        check for shifts that equal or exceed the width of the integer
    stdmethods   check signature of methods of well-known interfaces
    stringintconv check for string(int) conversions
    structtag    check that struct field tags conform to reflect.StructTag.Get
    tests        check for common mistaken usages of tests and examples
    unmarshal    report passing non-pointer or non-interface values to unmarshal
    unreachable  check for unreachable code
    unsafeptr    check for invalid conversions of uintptr to unsafe.Pointer
    unusedresult check for unused results of calls to some functions

By default all analyzers are run.
To select specific analyzers, use the -NAME flag for each one,
 or -NAME=false to run all analyzers not explicitly disabled.

Core flags:

  -V	print version and exit
  -all
    	no effect (deprecated)
  -asmdecl
    	enable asmdecl analysis
  -assign
    	enable assign analysis
  -atomic
    	enable atomic analysis
  -bool
    	deprecated alias for -bools
  -bools
    	enable bools analysis
  -buildtag
    	enable buildtag analysis
  -buildtags
    	deprecated alias for -buildtag
  -c int
    	display offending line with this many lines of context (default -1)
  -cgocall
    	enable cgocall analysis
  -composites
    	enable composites analysis
  -compositewhitelist
    	deprecated alias for -composites.whitelist (default true)
  -copylocks
    	enable copylocks analysis
  -errorsas
    	enable errorsas analysis
  -flags
    	print analyzer flags in JSON
  -httpresponse
    	enable httpresponse analysis
  -ifaceassert
    	enable ifaceassert analysis
  -json
    	emit JSON output
  -loopclosure
    	enable loopclosure analysis
  -lostcancel
    	enable lostcancel analysis
  -methods
    	deprecated alias for -stdmethods
  -nilfunc
    	enable nilfunc analysis
  -printf
    	enable printf analysis
  -printfuncs value
    	deprecated alias for -printf.funcs (default (*log.Logger).Fatal,(*log.Logger).Fatalf,(*log.Logger).Fatalln,(*log.Logger).Panic,(*log.Logger).Panicf,(*log.Logger).Panicln,(*log.Logger).Print,(*log.Logger).Printf,(*log.Logger).Println,(*testing.common).Error,(*testing.common).Errorf,(*testing.common).Fatal,(*testing.common).Fatalf,(*testing.common).Log,(*testing.common).Logf,(*testing.common).Skip,(*testing.common).Skipf,(testing.TB).Error,(testing.TB).Errorf,(testing.TB).Fatal,(testing.TB).Fatalf,(testing.TB).Log,(testing.TB).Logf,(testing.TB).Skip,(testing.TB).Skipf,fmt.Errorf,fmt.Fprint,fmt.Fprintf,fmt.Fprintln,fmt.Print,fmt.Printf,fmt.Println,fmt.Sprint,fmt.Sprintf,fmt.Sprintln,log.Fatal,log.Fatalf,log.Fatalln,log.Panic,log.Panicf,log.Panicln,log.Print,log.Printf,log.Println,runtime/trace.Logf)
  -rangeloops
    	deprecated alias for -loopclosure
  -shift
    	enable shift analysis
  -source
    	no effect (deprecated)
  -stdmethods
    	enable stdmethods analysis
  -stringintconv
    	enable stringintconv analysis
  -structtag
    	enable structtag analysis
  -tags string
    	no effect (deprecated)
  -tests
    	enable tests analysis
  -unmarshal
    	enable unmarshal analysis
  -unreachable
    	enable unreachable analysis
  -unsafeptr
    	enable unsafeptr analysis
  -unusedfuncs value
    	deprecated alias for -unusedresult.funcs (default errors.New,fmt.Errorf,fmt.Sprint,fmt.Sprintf,sort.Reverse)
  -unusedresult
    	enable unusedresult analysis
  -unusedstringmethods value
    	deprecated alias for -unusedresult.stringmethods (default Error,String)
  -v	no effect (deprecated)

To see details and flags of a specific analyzer, run 'vet.exe help name'.
